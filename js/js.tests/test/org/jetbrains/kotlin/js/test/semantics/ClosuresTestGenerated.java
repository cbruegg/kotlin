/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/box/closures")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ClosuresTestGenerated extends AbstractClosuresTest {
    public void testAllFilesPresentInClosures() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("captureExtensionReceiver.kt")
    public void testCaptureExtensionReceiver() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureExtensionReceiver.kt");
        doTest(fileName);
    }

    @TestMetadata("capturedLocalGenericFun.kt")
    public void testCapturedLocalGenericFun() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/capturedLocalGenericFun.kt");
        doTest(fileName);
    }

    @TestMetadata("closureInsideConstrucor.kt")
    public void testClosureInsideConstrucor() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideConstrucor.kt");
        doTest(fileName);
    }

    @TestMetadata("closureOnTopLevel1.kt")
    public void testClosureOnTopLevel1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureOnTopLevel1.kt");
        doTest(fileName);
    }

    @TestMetadata("closureOnTopLevel2.kt")
    public void testClosureOnTopLevel2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureOnTopLevel2.kt");
        doTest(fileName);
    }

    @TestMetadata("closureWithParameter.kt")
    public void testClosureWithParameter() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureWithParameter.kt");
        doTest(fileName);
    }

    @TestMetadata("closureWithParameterAndBoxing.kt")
    public void testClosureWithParameterAndBoxing() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureWithParameterAndBoxing.kt");
        doTest(fileName);
    }

    @TestMetadata("doubleEnclosedLocalVariable.kt")
    public void testDoubleEnclosedLocalVariable() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/doubleEnclosedLocalVariable.kt");
        doTest(fileName);
    }

    @TestMetadata("enclosingLocalVariable.kt")
    public void testEnclosingLocalVariable() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/enclosingLocalVariable.kt");
        doTest(fileName);
    }

    @TestMetadata("enclosingThis.kt")
    public void testEnclosingThis() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/enclosingThis.kt");
        doTest(fileName);
    }

    @TestMetadata("extensionClosure.kt")
    public void testExtensionClosure() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/extensionClosure.kt");
        doTest(fileName);
    }

    @TestMetadata("kt10044.kt")
    public void testKt10044() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt10044.kt");
        doTest(fileName);
    }

    @TestMetadata("kt2151.kt")
    public void testKt2151() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt2151.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3152.kt")
    public void testKt3152() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt3152.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3523.kt")
    public void testKt3523() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt3523.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3738.kt")
    public void testKt3738() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt3738.kt");
        doTest(fileName);
    }

    @TestMetadata("kt3905.kt")
    public void testKt3905() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt3905.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4106.kt")
    public void testKt4106() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt4106.kt");
        doTest(fileName);
    }

    @TestMetadata("kt4137.kt")
    public void testKt4137() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt4137.kt");
        doTest(fileName);
    }

    @TestMetadata("kt5589.kt")
    public void testKt5589() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/kt5589.kt");
        doTest(fileName);
    }

    @TestMetadata("localClassFunClosure.kt")
    public void testLocalClassFunClosure() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localClassFunClosure.kt");
        doTest(fileName);
    }

    @TestMetadata("localClassLambdaClosure.kt")
    public void testLocalClassLambdaClosure() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localClassLambdaClosure.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunctionInFunction.kt")
    public void testLocalFunctionInFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localFunctionInFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("localFunctionInInitializer.kt")
    public void testLocalFunctionInInitializer() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localFunctionInInitializer.kt");
        doTest(fileName);
    }

    @TestMetadata("localGenericFun.kt")
    public void testLocalGenericFun() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localGenericFun.kt");
        doTest(fileName);
    }

    @TestMetadata("localReturn.kt")
    public void testLocalReturn() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localReturn.kt");
        doTest(fileName);
    }

    @TestMetadata("localReturnWithAutolabel.kt")
    public void testLocalReturnWithAutolabel() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/localReturnWithAutolabel.kt");
        doTest(fileName);
    }

    @TestMetadata("recursiveClosure.kt")
    public void testRecursiveClosure() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/recursiveClosure.kt");
        doTest(fileName);
    }

    @TestMetadata("simplestClosure.kt")
    public void testSimplestClosure() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/simplestClosure.kt");
        doTest(fileName);
    }

    @TestMetadata("simplestClosureAndBoxing.kt")
    public void testSimplestClosureAndBoxing() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/simplestClosureAndBoxing.kt");
        doTest(fileName);
    }

    @TestMetadata("subclosuresWithinInitializers.kt")
    public void testSubclosuresWithinInitializers() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/subclosuresWithinInitializers.kt");
        doTest(fileName);
    }

    @TestMetadata("compiler/testData/codegen/box/closures/captureOuterProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CaptureOuterProperty extends AbstractClosuresTest {
        public void testAllFilesPresentInCaptureOuterProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/captureOuterProperty"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("captureFunctionInProperty.kt")
        public void testCaptureFunctionInProperty() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/captureFunctionInProperty.kt");
            doTest(fileName);
        }

        @TestMetadata("inFunction.kt")
        public void testInFunction() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/inFunction.kt");
            doTest(fileName);
        }

        @TestMetadata("inProperty.kt")
        public void testInProperty() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/inProperty.kt");
            doTest(fileName);
        }

        @TestMetadata("inPropertyDeepObjectChain.kt")
        public void testInPropertyDeepObjectChain() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyDeepObjectChain.kt");
            doTest(fileName);
        }

        @TestMetadata("inPropertyFromSuperClass.kt")
        public void testInPropertyFromSuperClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperClass.kt");
            doTest(fileName);
        }

        @TestMetadata("inPropertyFromSuperSuperClass.kt")
        public void testInPropertyFromSuperSuperClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/inPropertyFromSuperSuperClass.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4176.kt")
        public void testKt4176() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/kt4176.kt");
            doTest(fileName);
        }

        @TestMetadata("kt4656.kt")
        public void testKt4656() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/captureOuterProperty/kt4656.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("compiler/testData/codegen/box/closures/closureInsideClosure")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ClosureInsideClosure extends AbstractClosuresTest {
        public void testAllFilesPresentInClosureInsideClosure() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/codegen/box/closures/closureInsideClosure"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("localFunInsideLocalFun.kt")
        public void testLocalFunInsideLocalFun() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFun.kt");
            doTest(fileName);
        }

        @TestMetadata("localFunInsideLocalFunDifferentSignatures.kt")
        public void testLocalFunInsideLocalFunDifferentSignatures() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/localFunInsideLocalFunDifferentSignatures.kt");
            doTest(fileName);
        }

        @TestMetadata("propertyAndFunctionNameClash.kt")
        public void testPropertyAndFunctionNameClash() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/propertyAndFunctionNameClash.kt");
            doTest(fileName);
        }

        @TestMetadata("threeLevels.kt")
        public void testThreeLevels() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevels.kt");
            doTest(fileName);
        }

        @TestMetadata("threeLevelsDifferentSignatures.kt")
        public void testThreeLevelsDifferentSignatures() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/threeLevelsDifferentSignatures.kt");
            doTest(fileName);
        }

        @TestMetadata("varAsFunInsideLocalFun.kt")
        public void testVarAsFunInsideLocalFun() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/codegen/box/closures/closureInsideClosure/varAsFunInsideLocalFun.kt");
            doTest(fileName);
        }
    }
}
